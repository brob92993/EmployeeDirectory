{"version":3,"sources":["components/Employees.js","components/Search.js","utils/API.js","components/Directory.js","App.js","reportWebVitals.js","index.js"],"names":["Employees","props","dateOfBirth","date","dateArray","split","year","join","formatDate","dob","className","alt","firstName","src","icon","lastName","email","phone","address","Search","placeholder","name","type","onChange","event","startSort","axios","get","Directory","state","employees","empSort","search","sorted","componentDidMount","API","then","results","setState","data","sortEmp","filter","first","toLowerCase","includes","last","target","value","render","class","label","map","employee","picture","medium","location","street","number","id","city","postcode","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2087a1c3.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Employees = (props) => {\r\n\r\nfunction formatDate(date) {\r\n    const dateArray = date.split(\"-\");\r\n    const year = dateArray[0];\r\n    const month = dateArray[1];\r\n    const dayArray = dateArray[2].split(\"T\");\r\n    const day = dayArray[0];\r\n    const formattedDate = [month, day, year].join(\"-\");\r\n    return formattedDate;\r\n}\r\n\r\nlet dateOfBirth = formatDate(props.dob);\r\n\r\nreturn (\r\n  <tr className=\"tr\">\r\n    <td>\r\n      <img alt={props.firstName} src={props.icon} />\r\n    </td>\r\n    <td>\r\n      {props.firstName} {props.lastName}\r\n    </td>\r\n    <td>{props.email}</td>\r\n    <td>{props.phone} </td>\r\n    <td>{dateOfBirth}</td>\r\n    <td>{props.address}</td>\r\n  </tr>\r\n);\r\n};\r\n\r\nexport default Employees;","import React from \"react\";\r\n\r\nconst Search = (props) => {\r\nreturn (\r\n<div className=\"d-flex justify-content-center mx-auto\">\r\n    <form>\r\n    <input\r\n        placeholder=\"Search\"\r\n        name=\"search\"\r\n        type=\"text\"\r\n        className=\"form-control-lg search-font mx-auto\"\r\n        onChange={(event) => props.startSort(event)}\r\n    />\r\n    </form>\r\n</div>\r\n);\r\n};\r\n\r\nexport default Search;","import axios from \"axios\";\r\n\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default {\r\n  // Gets all users\r\n  getUsers: function () {\r\n    return axios.get(\"https://randomuser.me/api/?results=200&nat=us\");\r\n  },\r\n};","import React, { Component } from \"react\";\r\nimport Employees from \"./Employees.js\";\r\nimport Search from \"./Search.js\";\r\nimport API from \"../utils/API\";\r\nimport \"../styles/Directory.css\";\r\n\r\nclass Directory extends Component {\r\nstate = {\r\nemployees: [],\r\nempSort: [],\r\nsearch: \"\",\r\nsorted: false,\r\n};\r\n\r\ncomponentDidMount = () => {\r\nAPI.getUsers().then((results) => {\r\nthis.setState({\r\nemployees: results.data.results,\r\n        });\r\n    });\r\n};\r\n\r\nsortEmp = () => {\r\nlet { employees, search } = this.state;\r\nlet empSort = employees.filter((sorted) => {\r\nreturn (\r\nsorted.name.first.toLowerCase().includes(search.toLowerCase()) ||\r\nsorted.name.last.toLowerCase().includes(search.toLowerCase()) ||\r\nsorted.email.toLowerCase().includes(search.toLowerCase())\r\n        );\r\n    });\r\nthis.setState({ empSort });\r\n};\r\n\r\nstartSort = (event) => {\r\nthis.setState({ search: event.target.value }, () => {\r\n    this.sortEmp();\r\n    this.setState({ sorted: true });\r\n});\r\n};\r\n\r\nrender = () => {\r\nreturn (\r\n<div className=\"background\">\r\n<div className=\"jumbotron jumbotron-fluid\">\r\n    <h2 className=\"display-4 text-white\">Employee Directory</h2>\r\n    <p class= \"text-white\"> Search for an employee by entering their name or email below.</p>\r\n    <Search name=\"search\" startSort={this.startSort} label=\"Search\" />\r\n</div>\r\n\r\n<div className=\"container-fluid\">\r\n    <table className=\"table table-light table-striped table-hover table-bordered table-condensed\">\r\n    <thead className=\"thead\">\r\n        <tr>\r\n            <th>Image</th>\r\n            <th>Name</th>\r\n            <th>Email</th>\r\n            <th>Phone</th>\r\n            <th>Date of Birth</th>\r\n            <th>Address</th>\r\n        </tr>\r\n    </thead>\r\n    <tbody>\r\n        {\r\n\r\n!this.state.sorted\r\n? this.state.employees.map((employee) => (\r\n    <Employees\r\n      key={employee.id.value}\r\n      firstName={employee.name.first}\r\n      lastName={employee.name.last}\r\n      phone={employee.phone}\r\n      email={employee.email}\r\n      icon={employee.picture.medium}\r\n      dob={employee.dob.date}\r\n      address={\r\n        employee.location.street.number +\r\n        \" \" +\r\n        employee.location.street.name +\r\n        \", \" +\r\n        employee.location.city +\r\n        \", \" +\r\n        employee.location.state +\r\n        \" \" +\r\n        employee.location.postcode\r\n      }\r\n    />\r\n  ))\r\n:\r\n\r\nthis.state.empSort.map((employee) => (\r\n    <Employees\r\n      key={employee.id.value}\r\n      firstName={employee.name.first}\r\n      lastName={employee.name.last}\r\n      phone={employee.phone}\r\n      email={employee.email}\r\n      icon={employee.picture.medium}\r\n      dob={employee.dob.date}\r\n      address={\r\n        employee.location.street.number +\r\n        employee.location.street.name\r\n      }\r\n    />\r\n  ))\r\n}\r\n</tbody>\r\n</table>\r\n</div>\r\n</div>\r\n);\r\n};\r\n}\r\n\r\nexport default Directory;","import React from \"react\";\nimport Directory from \"./components/Directory.js\";\nimport \"./App.css\";\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Directory />\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}